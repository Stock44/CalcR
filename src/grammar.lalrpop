use std::str::FromStr;
use crate::ast::{Statement, Expression, Unit, NumType};

grammar;

pub Statement: Statement = {
    Expression => Statement::Expression(<>),
    <variable_name: IDENTIFIER> "=" <value:Expression> => Statement::Assignment {variable_name: String::from(variable_name), value}
}

Exprs = Comma<Expression>;

Comma<T>: Vec<T> = {
    <mut v: (<T> ",")*> <e: T> =>{
            v.push(e);
            v
    }
}

Unit: Unit = {
     <name: IDENTIFIER> <power: ("^" <INTEGER>)?>  => Unit(String::from(name), match power {Some(pow) => i64::from_str(pow).unwrap(), _ => 1})
}

// TODO differentiate between integer and decimal expressions.
Expression: Box<Expression> = {
    <value: INTEGER> <units: Unit+?> => Box::new(Expression::Constant{value: NumType::Integer(i64::from_str(value).unwrap()), units}),
    <value: DECIMAL> <units: Unit+?> => Box::new(Expression::Constant{value: NumType::Decimal(f64::from_str(value).unwrap()), units}),

    <name: IDENTIFIER> "(" <arguments: Exprs> ")" => Box::new(Expression::Function{name: String::from(name), arguments}),
}

match {
    r"-?(\d*\.\d+)|(\d*\.)" => DECIMAL,
    r"[A-Za-z]\w*" => IDENTIFIER,
    "^",
    "(",
    ")",
    ",",
    "=",
} else {
    r"-?\d+" => INTEGER,
} else {

}