use std::str::FromStr;
use crate::ast::{Statement, Expression, Unit, NumType, OpType};

grammar;

pub Statement: Statement = {
    Expression => Statement::Expression(<>),
    <variable_name: IDENTIFIER> "=" <value:Expression> => Statement::Assignment {variable_name: String::from(variable_name), value}
}

Exprs = Comma<Expression>;

Comma<T>: Vec<T> = {
    <mut v: (<T> ",")*> <e: T> =>{
            v.push(e);
            v
    }
}



Unit: Unit = {
     <name: IDENTIFIER> <power: ("_" <INTEGER>)?>  => Unit(String::from(name), match power {Some(pow) => i64::from_str(pow).unwrap(), _ => 1})
}

Tier<Op,NextTier>: Box<Expression> = {
    <lhs: Tier<Op,NextTier>> <op_type: Op> <rhs: NextTier> => Box::new(Expression::Operation{op_type, lhs, rhs}),
    NextTier
};

Term: Box<Expression> = {
    <value: INTEGER> <units: Unit+?> => Box::new(Expression::Constant{value: NumType::Integer(i64::from_str(value).unwrap()), units}),
    <value: DECIMAL> <units: Unit+?> => Box::new(Expression::Constant{value: NumType::Decimal(f64::from_str(value).unwrap()), units}),
    <name: IDENTIFIER> "(" <arguments: Exprs> ")" => Box::new(Expression::Function{name: String::from(name), arguments}),
    "(" <Expression> ")"
}

Expression = Tier<AddSubOp, Factor>;
Factor = Tier<FactorOp, Power>;
Power = Tier<PowerOp, Term>;

AddSubOp: OpType = { // (3)
    "+" => OpType::Add,
    "-" => OpType::Subtract,
};

FactorOp: OpType = {
    "*" => OpType::Multiply,
    "/" => OpType::Divide,
    "//" => OpType::Floor,
    "%" => OpType::Modulo,
};

PowerOp: OpType = {
    "^" => OpType::Power,
};

match {
    r"-?(\d*\.\d+)|(\d*\.)" => DECIMAL,
    r"[A-Za-z][A-Za-z0-9]*" => IDENTIFIER,
    "+",
    "-",
    "*",
    "/",
    "//",
    "%",
    "^",
    "_",
    "(",
    ")",
    ",",
    "=",
} else {
    r"-?\d+" => INTEGER,
} else {

}